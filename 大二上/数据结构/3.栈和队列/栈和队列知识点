**栈和队列是操作受限的<font color='red'>线性表</font>**

1. **掌握栈和队列的概念。**
2. **理解顺序队列的不足，掌握循环队列的概念。**
3. **掌握循环队列判队空、队满等操作**。

# 1.栈

## 顺序栈



![image-20250104135809335](https://liwenjunpictures.oss-cn-shenzhen.aliyuncs.com/202501041358397.png)

### 特性：先进后出

**base为栈底指针，指向栈底的位置。**
**指针top指向栈顶元素在顺序栈中的<font color='red'>下一个位置</font>**——获得栈顶元素 **`base[top-1]`**

**base = nullptr**表示栈不存在

**top = 0**,表示空栈

当插入新的栈顶元素时,栈顶top+1，删除栈顶元素时，栈顶top-

top ≥ 栈容量MaxSize时，栈满，溢出 ——**<font color='red'>判栈满 top=MaxSize</font>**

### 应用：

#### 1.波兰式

 表达式`a+b*(c-d)-e/f`的
   (1) 前缀表达式(波兰式)：`-+a*b-cd/ef` 
   (2) 中缀表达式：`a+b*(c-d)-e/f` 
   (3) 后缀表达式(逆波兰式): `abcd-*+ef/-` 

#### 2.递归

## 练习：

0.设将整数1、2、3、4依次进栈，但只要出栈时栈非空，则可将出栈操作按任何次序夹入其中，请回答下列问题：
1）若入栈次序为push(1)，pop()，push(2）push(3)，pop()，pop( )，push(4)，pop( )，则出栈的数字序列是什么？
2）能否得到出栈序列423和432？并说明为什么不能得到或如何得到。
<font color='CornflowerBlue'>**3）请分析1、2、3、4的24种排列中，哪些序列可以通过相应的入出栈得到**。</font>

2.已知一个栈的输出是按ABCD的顺序，可能的入栈顺序有()。 
A.ACBD B.ABCD C.DCAB D.BCAD 

3.栈在()中应用。 
A.递归调用 B.表达式计算 C.子程序调用 **D.以上都是**  

4 中缀表达式`(A+B)*(C-D)/(E-F*G)`对应的后缀表达式是___。

5 判断字符串"`([]()[()])`"中的括号是否配对时，所需的栈的容量至少是___。

6  有4个元素，其入栈次序为A、B、3、_，在各种可能的出入栈次序中，包含

全部四个元素，是合法C语言标识符的有哪几个?
给出所有可能的出入栈操作序列及其对应的合法标识符。（用S表示入栈，X
表示出栈） // 12分

7 当利用大小为N的数组顺序存储一个栈时,假定**用top==N表示栈空**,则向这个栈插入一个元素时,首先应执行______语句修改top指针.
   A.top++                    **B.top- -**
   C.top=0                    D.top=N-1

8 假定利用数组a[N]顺序存储一个栈，top表示栈顶指针，**top==-1表示栈空**，并已知栈未满，当**元素X进栈**是所执行的操作为______。

A.a[--top]=x      B.a[top--]=x

**C.a[++top]=x**      D.a[top++]=x

9 判定一个栈s（**最多元素数为m0**）**为空**的条件
    是____，为满的条件是_____。
   A. s-〉top！= 0        **B. s-〉top== 0**
   C. s-〉top！= m0       **D. s-〉top== m0**
   E. s-〉top！= m0-1     F. s-〉top== m0-1

10 假定一个**链式栈**的栈顶指针用top表示，每个结点包含data和next两个域，出栈时所进行的指针操作为 	`top=top->next`



## Answer:

**0**   1）**1324**  2) 432可以，423不行，4先出栈说明全部数字都压入栈，只能按照入栈顺序出栈 

3）1234 1243 1324 1342 1432  2134 2143 2341 2314 2431 3214 3241 3421 4321 

**2**  ABC  

**4**  `AB+CD-*EFG*- /` 

**5**  3——**最多同时不匹配个数**

<font color='#EE82EE'>**6 A4纸**</font>





 

# 2.队列 先进先出

## 1 顺序队列

有两个指针：**<font color='red'>队头指针front和队尾指针rear</font>**

### 特性：

1.入队 rear++; 出队 front++

队头指针始终指向**队列头元素**

**队尾指针**始终指向队**<font color='red'>列尾元素的下一个位置</font>**

**空队列** `front==rear` 

## 2.循环队列

<img src="https://liwenjunpictures.oss-cn-shenzhen.aliyuncs.com/202501041410934.png" alt="image-20250104141005904" style="zoom:150%;" />

#### 问题：

`front==rear` 可能是空队列 ，也可能队满

### 方法：

**<font color='red'>牺牲一个元素空间</font>**

**空队列** `front==rear` 

**队满** `(rear+1)%Maxsize ==front`

**队列元素** `（rear-front+Maxsize) %Maxsize`



## 练习：

1.已知队列为空，数据1、2、3、4依次逐个进入队列，则出队的数据顺序为（） 
**A.1234** B.4321 C.1324 D.2413 

2.设循环队列的空间容量为n，采用损失一个空间的方法，front和rear分别指示队头和队尾位置，则判断队空的条件是 ___ ,判断队满的条件是___，队列中的元素个数是___。 

3 若用长度为6的数组存储循环队列，且当前rear和front的值分别为1和5，当从队列中删除一个元素，再加入两个元素后，rear和front的值分别为___  和 ___。 			

4 假定用一维数组a[7]顺序存储一个循环队列，队首和队尾指针分别用front和rear表示，当前队列中已有4个元素：BJ，SH，NJ，WH，其中BJ为队首元素，front的值为3。
（1）请画出初始循环队列存储状态。//4分
（2）请连续做2次出队运算后的循环队列存储状态；//4分
（3）再让GZ，SZ，FS，CS，JM、BH元素依次进队，画出最后的存储状态。若
不能入队，说明理由。（采用牺牲一个空间的存储方式）//6分

5 设长度为n的**链队列用单循环链表**表示，若**只设头指针**，则怎样进行入队和出队操作；若只设尾指针呢？

**<font color='CornflowerBlue'>只有头指针，出队（头指针移动）简单，入队需要遍历到尾。只设尾指针，两个都是O(1)</font>**

有点不懂

6 假设Q[11] (下标为从0到10)是一个**循环队列**,初始状态为`front=rear=0`;画出分别做完下列操作后队列的头尾指针的装填变化情况,若不能入队,请指出其元素,说明理由..(采用少用一个元素空间的方式)

1）d,e,b,g,h入队 		`front=0,rear=5`
2）d,e出队				`front=2 rear =5`
3）i,j,k,l,m入队			`front=2 rear=10`
4）b 出队				`front=3 rear=10` 
5）**n,o,p**,q,r 入队 		`front=3 rear=2`

**<font color='CornflowerBlue'>q,r不能入队。队满</font>**

## Answer

**1 队列的<font color='red'>入队和出队序列一致</font>**

**3** `3 0` 

<font color='#EE82EE'>**4 A4**</font>





# 3.串

1. **理解串概念及表示。**
2. **掌握串的各种操作。**
3. **掌握KMP算法的next求值和匹配过程。**
4. **理解next改进算法。**
5. **了解next值的更多应用**

## 概念

**<font color='red'>模式匹配</font>**确定子串在主串中首次出现的位置的运算

**<font color='red'>存储密度</font>**：**数据元素**所占存储位 **/** **实际分配**的存储位



## KMP算法

**<font color='red'>时间复杂度O(n+m）</font>**计算nextO(m) 寻找子串 O(n)

### next计算

`next[0]=-1` ，**其他最长公共前缀**

#### **计算过程**

![image-20250104205053362](https://liwenjunpictures.oss-cn-shenzhen.aliyuncs.com/202501042050406.png)

![image-20250104205117174](https://liwenjunpictures.oss-cn-shenzhen.aliyuncs.com/202501042051229.png)

### KMP算法流程

![image-20250104205411968](https://liwenjunpictures.oss-cn-shenzhen.aliyuncs.com/202501042054013.png)

## 练习

1 设有两个字符串s和t，求**t在s中首次出现的位置**的运算称为()。 
A.连接 B.求子串 C.求串长 **D.模式匹配** 

2 设目标串为s，模式串为t，在**KMP算法**中，next[4]=2的含义是()。 
A.目标串匹配失败的位置是i=4 
B.模式串匹配失败的位置是j=2 
C.**表示t[4]字符前面最多有两个字符与t开头的两个字符相同** 
D.表示s[4]字符前面最多有两个字符与t开头的两个字符相同。 